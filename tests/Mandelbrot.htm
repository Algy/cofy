<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Mandelbrot in HTML5</title>
    <script type="text/javascript" src="complex.js"></script>
    <script type="text/javascript">
        // Generating fractals
        var lastFormula;
        var tim;
        function generateFractal(formula) {
            clearTimeout(tim);
            lastFormula = formula;
		    var cv = document.getElementById("cv");
            var w = cv.width;
            var h = cv.height;
            cv.width = cv.width;

            var g = cv.getContext("2d");
            var img = g.getImageData(0, 0, w, h);
            var pix = img.data;
		    var y = 0;

            function getColor(i) {
	            var k = 1.0 / 3.0;
	            var k2 = 2.0 / 3.0;
	            var cr = 0.0;
	            var cg = 0.0;
	            var cb = 0.0;
	            if (i >= k2) {
		            cr = i - k2;
		            cg = (k - 1) - cr;
	            }
	            else if (i >= k) {
		            cg = i - k;
		            cb = (k - 1) - cg;
	            }
	            else {
		            cb = i;
	            }
	            var r = parseInt(cr * 3 * 255);
	            var g = parseInt(cg * 3 * 255);
	            var b = parseInt(cb * 3 * 255);
	            return [r, g, b];
            }
            function drawPixel(x, y, i) {
	            var c = getColor(i);
	            var off = 4 * (y * w + x);
	            pix[off] = c[0];
	            pix[off + 1] = c[1];
	            pix[off + 2] = c[2];
	            pix[off + 3] = 255;
            }
            function drawLine() {
	            for (var x = 0; x < w; x++) {
                    var c = formula(new Complex(x / w / size.x + offset.x, y / h / size.y + offset.y));
                    drawPixel(x, y, c);
	            }
	            g.putImageData(img, 0, 0);
                if (++y < h)
                    tim = setTimeout(drawLine, 1);
                else
	                im.src = cv.toDataURL();
            }
            if (y < h)
	            tim = setTimeout(drawLine, 1);
		}

        // Zooming
        var offset = new Complex(-3.0, -2.0);
        var size = new Complex(0.25, 0.25);

        var down = false;
        var x1, y1, x2;
        function canvas_onmousedown(e) {
            var sel = document.getElementById("sel");
            var di = document.getElementById("di");

            down = true;
            x1 = x2 = e.pageX - di.offsetLeft;
            y1 = e.pageY - di.offsetTop;

            sel.style.left = x1.toString() + "px";
            sel.style.top = y1.toString() + "px";

            sel.style.width = "0px";
            sel.style.height = "0px";

            sel.style.visibility = "visible";
        }
        function canvas_onmousemove(e) {
            if (down) {
                var sel = document.getElementById("sel");
                var di = document.getElementById("di");

                x2 = e.pageX - di.offsetLeft;

                sel.style.left = Math.min(x1, x2).toString() + "px";
                sel.style.top = Math.min(y1, y1 + x2 - x1).toString() + "px";

                sel.style.width = (Math.max(x1, x2) - Math.min(x1, x2)).toString() + "px";
                sel.style.height = (Math.max(x1, x2) - Math.min(x1, x2)).toString() + "px";
            }
        }
        function canvas_onmouseup() {
            if (down) {
                down = false;

                var sel = document.getElementById("sel");
                var di = document.getElementById("di");
                var cv = document.getElementById("cv");

                sel.style.visibility = "collapse";

                var x = Math.min(x1, x2);
                var y = Math.min(y1, y1 + x2 - x1);
                var w = Math.max(x1, x2) - Math.min(x1, x2);
                if (w > 10) {
                    var d = w / cv.width;

                    offset.x += x / cv.width / size.x;
                    offset.y += y / cv.height / size.y;

                    size.x /= d;
                    size.y /= d;

                    generateFractal(lastFormula);
                }
            }
        }

        // Formulas
        function mandelbrot(xy) {
            var z = new Complex(xy.x, xy.y);
            var i = 0;

            while (i < mandelbrot.maxIter && z.abs() <= mandelbrot.bailout) {
                z = z.pow(mandelbrot.power).add(xy);
                i++;
            }

            if (i < mandelbrot.maxIter) {
                i -= Math.log(Math.log(z.abs())) / Math.log(mandelbrot.power.abs());
                return i / mandelbrot.maxIter;
            }
            else
                return 0.0;
        }
        mandelbrot.maxIter = 32;
        mandelbrot.power = new Complex(2.0, 0.0);
        mandelbrot.bailout = 4.0;

        function refresh() {
            mandelbrot.maxIter = parseFloat(document.getElementById("maxIterIn").value);
            mandelbrot.power.x = parseFloat(document.getElementById("powerXIn").value);
            mandelbrot.power.y = parseFloat(document.getElementById("powerYIn").value);
            mandelbrot.bailout = parseFloat(document.getElementById("bailoutIn").value);
            generateFractal(mandelbrot);
        }
    </script>
</head>
<body onload="generateFractal(mandelbrot);" onmouseup="canvas_onmouseup();" onmousemove="canvas_onmousemove(event);">
    <h1>Mandelbrot</h1>
    <p>
        Maximal iterations: <input id="maxIterIn" type="text" value="32" /><br />
        Power (real): <input id="powerXIn" type="text" value="2" /><br />
        Power (imaginary): <input id="powerYIn" type="text" value="0" /><br />
        Bailout: <input id="bailoutIn" type="text" value="4" /><br />
        <input type="button" value="Refresh" onclick="refresh();" />
    </p>
    <div id="di" style="position: relative;">
        <canvas id="cv" width="580" height="580" style="border-style: solid; border-width: 1px;"
                onmousedown="canvas_onmousedown(event);">
            Your browser doesn't support canvas.
        </canvas>
        <div id="sel" style="position: absolute; visibility: collapse; border-color: #ff0000; border-style: solid; border-width: 1px;"></div>
    </div>
    <p>
        In order to save the result save this image:<br />
        <img id="im" style="width: 50px; height: 50px;" />
    </p>
</body>
</html>
